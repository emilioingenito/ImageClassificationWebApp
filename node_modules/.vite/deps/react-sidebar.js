import {
  _assertThisInitialized,
  _inheritsLoose
} from "./chunk-G6O25BTV.js";
import {
  require_prop_types
} from "./chunk-BZTWW5W7.js";
import {
  require_react
} from "./chunk-M45RNPIH.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

// node_modules/@babel/runtime/helpers/esm/objectSpread.js
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);
    if (typeof Object.getOwnPropertySymbols === "function") {
      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }
    ownKeys.forEach(function(key) {
      _defineProperty(target, key, source[key]);
    });
  }
  return target;
}

// node_modules/react-sidebar/dist/react-sidebar.esm.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var CANCEL_DISTANCE_ON_SCROLL = 20;
var defaultStyles = {
  root: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    overflow: "hidden"
  },
  sidebar: {
    zIndex: 2,
    position: "absolute",
    top: 0,
    bottom: 0,
    transition: "transform .3s ease-out",
    WebkitTransition: "-webkit-transform .3s ease-out",
    willChange: "transform",
    overflowY: "auto"
  },
  content: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    overflowY: "auto",
    WebkitOverflowScrolling: "touch",
    transition: "left .3s ease-out, right .3s ease-out"
  },
  overlay: {
    zIndex: 1,
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    opacity: 0,
    visibility: "hidden",
    transition: "opacity .3s ease-out, visibility .3s ease-out",
    backgroundColor: "rgba(0,0,0,.3)"
  },
  dragHandle: {
    zIndex: 1,
    position: "fixed",
    top: 0,
    bottom: 0
  }
};
var Sidebar = function(_Component) {
  _inheritsLoose(Sidebar2, _Component);
  function Sidebar2(props) {
    var _this;
    _this = _Component.call(this, props) || this;
    _this.state = {
      sidebarWidth: props.defaultSidebarWidth,
      touchIdentifier: null,
      touchStartX: null,
      touchCurrentX: null,
      dragSupported: false
    };
    _this.overlayClicked = _this.overlayClicked.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onTouchStart = _this.onTouchStart.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onTouchMove = _this.onTouchMove.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onTouchEnd = _this.onTouchEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onScroll = _this.onScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.saveSidebarRef = _this.saveSidebarRef.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  var _proto = Sidebar2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var isIos = /iPad|iPhone|iPod/.test(navigator ? navigator.userAgent : "");
    this.setState({
      dragSupported: typeof window === "object" && "ontouchstart" in window && !isIos
    });
    this.saveSidebarWidth();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    if (!this.isTouching()) {
      this.saveSidebarWidth();
    }
  };
  _proto.onTouchStart = function onTouchStart(ev) {
    if (!this.isTouching()) {
      var touch = ev.targetTouches[0];
      this.setState({
        touchIdentifier: touch.identifier,
        touchStartX: touch.clientX,
        touchCurrentX: touch.clientX
      });
    }
  };
  _proto.onTouchMove = function onTouchMove(ev) {
    if (this.isTouching()) {
      for (var ind = 0; ind < ev.targetTouches.length; ind++) {
        if (ev.targetTouches[ind].identifier === this.state.touchIdentifier) {
          this.setState({
            touchCurrentX: ev.targetTouches[ind].clientX
          });
          break;
        }
      }
    }
  };
  _proto.onTouchEnd = function onTouchEnd() {
    if (this.isTouching()) {
      var touchWidth = this.touchSidebarWidth();
      if (this.props.open && touchWidth < this.state.sidebarWidth - this.props.dragToggleDistance || !this.props.open && touchWidth > this.props.dragToggleDistance) {
        this.props.onSetOpen(!this.props.open);
      }
      this.setState({
        touchIdentifier: null,
        touchStartX: null,
        touchCurrentX: null
      });
    }
  };
  _proto.onScroll = function onScroll() {
    if (this.isTouching() && this.inCancelDistanceOnScroll()) {
      this.setState({
        touchIdentifier: null,
        touchStartX: null,
        touchCurrentX: null
      });
    }
  };
  _proto.inCancelDistanceOnScroll = function inCancelDistanceOnScroll() {
    var cancelDistanceOnScroll;
    if (this.props.pullRight) {
      cancelDistanceOnScroll = Math.abs(this.state.touchCurrentX - this.state.touchStartX) < CANCEL_DISTANCE_ON_SCROLL;
    } else {
      cancelDistanceOnScroll = Math.abs(this.state.touchStartX - this.state.touchCurrentX) < CANCEL_DISTANCE_ON_SCROLL;
    }
    return cancelDistanceOnScroll;
  };
  _proto.isTouching = function isTouching() {
    return this.state.touchIdentifier !== null;
  };
  _proto.overlayClicked = function overlayClicked() {
    if (this.props.open) {
      this.props.onSetOpen(false);
    }
  };
  _proto.saveSidebarWidth = function saveSidebarWidth() {
    var width = this.sidebar.offsetWidth;
    if (width !== this.state.sidebarWidth) {
      this.setState({
        sidebarWidth: width
      });
    }
  };
  _proto.saveSidebarRef = function saveSidebarRef(node) {
    this.sidebar = node;
  };
  _proto.touchSidebarWidth = function touchSidebarWidth() {
    if (this.props.pullRight) {
      if (this.props.open && window.innerWidth - this.state.touchStartX < this.state.sidebarWidth) {
        if (this.state.touchCurrentX > this.state.touchStartX) {
          return this.state.sidebarWidth + this.state.touchStartX - this.state.touchCurrentX;
        }
        return this.state.sidebarWidth;
      }
      return Math.min(window.innerWidth - this.state.touchCurrentX, this.state.sidebarWidth);
    }
    if (this.props.open && this.state.touchStartX < this.state.sidebarWidth) {
      if (this.state.touchCurrentX > this.state.touchStartX) {
        return this.state.sidebarWidth;
      }
      return this.state.sidebarWidth - this.state.touchStartX + this.state.touchCurrentX;
    }
    return Math.min(this.state.touchCurrentX, this.state.sidebarWidth);
  };
  _proto.render = function render() {
    var sidebarStyle = _objectSpread({}, defaultStyles.sidebar, this.props.styles.sidebar);
    var contentStyle = _objectSpread({}, defaultStyles.content, this.props.styles.content);
    var overlayStyle = _objectSpread({}, defaultStyles.overlay, this.props.styles.overlay);
    var useTouch = this.state.dragSupported && this.props.touch;
    var isTouching = this.isTouching();
    var rootProps = {
      className: this.props.rootClassName,
      style: _objectSpread({}, defaultStyles.root, this.props.styles.root),
      role: "navigation",
      id: this.props.rootId
    };
    var dragHandle;
    var hasBoxShadow = this.props.shadow && (isTouching || this.props.open || this.props.docked);
    if (this.props.pullRight) {
      sidebarStyle.right = 0;
      sidebarStyle.transform = "translateX(100%)";
      sidebarStyle.WebkitTransform = "translateX(100%)";
      if (hasBoxShadow) {
        sidebarStyle.boxShadow = "-2px 2px 4px rgba(0, 0, 0, 0.15)";
      }
    } else {
      sidebarStyle.left = 0;
      sidebarStyle.transform = "translateX(-100%)";
      sidebarStyle.WebkitTransform = "translateX(-100%)";
      if (hasBoxShadow) {
        sidebarStyle.boxShadow = "2px 2px 4px rgba(0, 0, 0, 0.15)";
      }
    }
    if (isTouching) {
      var percentage = this.touchSidebarWidth() / this.state.sidebarWidth;
      if (this.props.pullRight) {
        sidebarStyle.transform = "translateX(" + (1 - percentage) * 100 + "%)";
        sidebarStyle.WebkitTransform = "translateX(" + (1 - percentage) * 100 + "%)";
      } else {
        sidebarStyle.transform = "translateX(-" + (1 - percentage) * 100 + "%)";
        sidebarStyle.WebkitTransform = "translateX(-" + (1 - percentage) * 100 + "%)";
      }
      overlayStyle.opacity = percentage;
      overlayStyle.visibility = "visible";
    } else if (this.props.docked) {
      if (this.state.sidebarWidth !== 0) {
        sidebarStyle.transform = "translateX(0%)";
        sidebarStyle.WebkitTransform = "translateX(0%)";
      }
      if (this.props.pullRight) {
        contentStyle.right = this.state.sidebarWidth + "px";
      } else {
        contentStyle.left = this.state.sidebarWidth + "px";
      }
    } else if (this.props.open) {
      sidebarStyle.transform = "translateX(0%)";
      sidebarStyle.WebkitTransform = "translateX(0%)";
      overlayStyle.opacity = 1;
      overlayStyle.visibility = "visible";
    }
    if (isTouching || !this.props.transitions) {
      sidebarStyle.transition = "none";
      sidebarStyle.WebkitTransition = "none";
      contentStyle.transition = "none";
      overlayStyle.transition = "none";
    }
    if (useTouch) {
      if (this.props.open) {
        rootProps.onTouchStart = this.onTouchStart;
        rootProps.onTouchMove = this.onTouchMove;
        rootProps.onTouchEnd = this.onTouchEnd;
        rootProps.onTouchCancel = this.onTouchEnd;
        rootProps.onScroll = this.onScroll;
      } else {
        var dragHandleStyle = _objectSpread({}, defaultStyles.dragHandle, this.props.styles.dragHandle);
        dragHandleStyle.width = this.props.touchHandleWidth;
        if (this.props.pullRight) {
          dragHandleStyle.right = 0;
        } else {
          dragHandleStyle.left = 0;
        }
        dragHandle = import_react.default.createElement("div", {
          style: dragHandleStyle,
          onTouchStart: this.onTouchStart,
          onTouchMove: this.onTouchMove,
          onTouchEnd: this.onTouchEnd,
          onTouchCancel: this.onTouchEnd
        });
      }
    }
    return import_react.default.createElement("div", rootProps, import_react.default.createElement("div", {
      className: this.props.sidebarClassName,
      style: sidebarStyle,
      ref: this.saveSidebarRef,
      id: this.props.sidebarId
    }, this.props.sidebar), import_react.default.createElement("div", {
      className: this.props.overlayClassName,
      style: overlayStyle,
      onClick: this.overlayClicked,
      id: this.props.overlayId
    }), import_react.default.createElement("div", {
      className: this.props.contentClassName,
      style: contentStyle,
      id: this.props.contentId
    }, dragHandle, this.props.children));
  };
  return Sidebar2;
}(import_react.Component);
true ? Sidebar.propTypes = {
  children: import_prop_types.default.node.isRequired,
  styles: import_prop_types.default.shape({
    root: import_prop_types.default.object,
    sidebar: import_prop_types.default.object,
    content: import_prop_types.default.object,
    overlay: import_prop_types.default.object,
    dragHandle: import_prop_types.default.object
  }),
  rootClassName: import_prop_types.default.string,
  sidebarClassName: import_prop_types.default.string,
  contentClassName: import_prop_types.default.string,
  overlayClassName: import_prop_types.default.string,
  sidebar: import_prop_types.default.node.isRequired,
  docked: import_prop_types.default.bool,
  open: import_prop_types.default.bool,
  transitions: import_prop_types.default.bool,
  touch: import_prop_types.default.bool,
  touchHandleWidth: import_prop_types.default.number,
  pullRight: import_prop_types.default.bool,
  shadow: import_prop_types.default.bool,
  dragToggleDistance: import_prop_types.default.number,
  onSetOpen: import_prop_types.default.func,
  defaultSidebarWidth: import_prop_types.default.number,
  rootId: import_prop_types.default.string,
  sidebarId: import_prop_types.default.string,
  contentId: import_prop_types.default.string,
  overlayId: import_prop_types.default.string
} : void 0;
Sidebar.defaultProps = {
  docked: false,
  open: false,
  transitions: true,
  touch: true,
  touchHandleWidth: 20,
  pullRight: false,
  shadow: true,
  dragToggleDistance: 30,
  onSetOpen: function onSetOpen() {
  },
  styles: {},
  defaultSidebarWidth: 0
};
var react_sidebar_esm_default = Sidebar;

// dep:react-sidebar
var react_sidebar_default = react_sidebar_esm_default;
export {
  react_sidebar_default as default
};
//# sourceMappingURL=react-sidebar.js.map
